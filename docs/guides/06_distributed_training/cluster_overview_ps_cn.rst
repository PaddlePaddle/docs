
..  _cluster_overview_ps:

参数服务器概述
-------------------------

搜索推荐场景经常面临数据量大、特征维度高且稀疏化的问题。而参数服务器（ParameterServer）模式采用了一种将模型参数中心化管理的方式来实现模型参数的分布式存储和更新。该模式下的节点/进程有两种不同的角色：

1. 训练节点（Trainer/Worker）：该节点负责完成数据读取、从服务节点拉取参数、前向计算、反向梯度计算等过程，并将计算出的梯度上传至服务节点。
2. 服务节点（Server）：在收到所有训练节点传来的梯度后，该节点会将梯度聚合并更新参数，供训练节点拉取进行下一轮的训练。

因此参数服务器模式对于存储超大规模模型参数的训练场景十分友好，常被用于训练拥有海量稀疏参数的搜索推荐领域模型。

1 类型介绍
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

1.1 CPU参数服务器
""""""""""""

CPU参数服务器（CPUPS）采用多台硬件型号完全一致的CPU机器进行训练，由高性能异步训练 Worker、高效通信策略和高性能 Server 组成。

由于使用的CPU数量较多，训练中能够充分展示CPU多核的吞吐量优势，在异步训练模式下训练简单模型可以极大提升数据吞吐量。

纯CPU参数服务器相关原理可以参考：\ `CPUPS原理 <https://>`_\

1.2 GPU参数服务器
""""""""""""

随着模型网络越来越复杂，对算力要求越来越高，在数据量不变的情况下，CPU计算性能差的弱势就会显现。虽然可以通过增加 CPU 机器数量来解决，甚至可以增加上百台，但是这种方法不仅成本大幅提高，而且集群的稳定性和扩展性也存在较大的问题。

因此GPU参数服务器（GPUPS）应运而生，通常100台CPU机器才能训练的模型，仅需1台多卡 GPU 机器即可完成训练。

纯GPU参数服务器相关原理可以参考：\ `GPUPS原理 <https://>`_\

1.3 异构参数服务器
""""""""""""

为进一步提升训练资源利用率，解除训练节点必须严格使用同一种硬件型号的枷锁，提出了通用异构参数服务器（HeterPS）。

HeterPS使训练任务对硬件型号不敏感，即可以同时使用不同的硬件混合异构训练，如 CPU、AI专用芯片（如百度昆仑XPU）以及不同型号的GPU，如 v100、P40、K40 等。同时还可以解决大规模稀疏特征模型训练场景下 IO 占比过高导致的芯片资源利用率过低的问题。

异构参数服务器的最大亮点是硬件感知的任务切分。将IO密集型任务（如数据读取、Embedding查询）切分给CPU机器，将计算密集型任务切分给GPU机器；用户可以根据子任务的计算复杂度来灵活决定机器配比，并且还可以兼容传统纯CPU参数服务器和纯GPU参数服务器所支持的训练任务。

通用异构参数服务器相关原理可以参考：\ `HeterPS原理 <https://>`_\


2 使用方法
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

本节将利用一个推荐领域的训练实例，详细讲解CPUPS的基础使用方法，完整示例代码位于 \ `PaddleRec流式训练 <https://github.com/PaddlePaddle/PaddleRec/blob/master/tools/static_ps_online_trainer.py>`_\

在推荐系统在服务的过程中，会不断产生可用于训练CTR模型的日志数据，流式训练是指数据不是一次性放入训练系统中，而是随着时间流式地加入到训练过程中去。

一个完整的训练过程应该包含以下几个部分：

    1. 获取之前训练已经保存好的模型，并加载模型（如果之前没有保存模型，则跳过加载模型这一步）。
    2. 分Pass训练，在每一个Pass的训练过程中，分为如下几步：
       a. 加载数据。
       b. 分布式训练并获取训练指标（AUC等）。
       c. 分布式预测：主要用于召回模块的离线建库部分。
    3. 保存模型：
       a. Checkpoint Model：用于下次训练开始时的模型加载部分。
       b. Inference Model：用于线上推理部署。
    
下面将逐一进行讲解。

2.1 大规模稀疏参数
""""""""""""

sparse_embedding
entry

2.2 加载数据
""""""""""""

dataset使用
数据拆分

2.3 分布式训练及预测
""""""""""""

train_from_dataset
infer_from_dataset
dump

2.4 分布式指标计算
""""""""""""

stat_var_name
ctr_metric_bundle
all_reduce

2.5 模型保存与加载
""""""""""""

save_persistables
save_inference_model
load_model

3 进阶教程
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

1. accessor配置
2. GPUPS示例
3. HeterPS示例
4. 二次开发